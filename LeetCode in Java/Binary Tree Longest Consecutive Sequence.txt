# Given a binary tree, find the length of the longest consecutive sequence path.
#
# The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections.
# The longest consecutive path need to be from parent to child (cannot be the reverse).
#
# For example,
#
#    1
#     \
#      3
#     / \
#    2   4
#         \
#          5
# Longest consecutive sequence path is 3-4-5, so return 3.
#
#    2
#     \
#      3
#     /
#    2
#   /
#  1
# Longest consecutive sequence path is 2-3,not3-2-1, so return 2.




// Time:  O(n)
// Space: O(h)

import java.util.*;
public class Solution {  
    private static int maxLen = 0;
    
    public int longestConsecutive(TreeNode root) {
        if(root == null) return maxLen;
        helper(root);
        return maxLen;
    }
       
    public int helper(TreeNode root){
        if (root==null) return 0;
        
        int leftLen = helper(root.left);
        int rightLen = helper(root.right);
        int curLen = 1;
        if (leftLen>0 && root.left.val-root.val==1) curLen = Math.max(curLen, leftLen+1);
        if (rightLen>0 && root.right.val-root.val==1) curLen = Math.max(curLen, rightLen+1);
        
        maxLen = Math.max(Math.max(maxLen, curLen), Math.max(leftLen, rightLen));
        
        return maxLen;
    }

    
    public static void main(String[] args)
    {
        Solution ans = new Solution();
        TreeNode node = new TreeNode(1);
        node.left = new TreeNode(2);
        node.right = new TreeNode(3);
        
        System.out.println(ans.longestConsecutive(node));
    }
 
}