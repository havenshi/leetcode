# Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
#
# Note:
#
# Given target value is a floating point.
# You are guaranteed to have only one unique value in the BST that is closest to the target.

# Time:  O(h)
# Space: O(1)

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


public class Solution {  
    public int closestValue(TreeNode root, double target) {  
          
        int closest = root.val;  
        double min = Double.MAX_VALUE;  
          
        while(root!=null) { 
            if(target == root.val) {  
                return root.val;  
            }  

            if( Math.abs(root.val - target) < min  ) {  
                min = Math.abs(root.val - target);  
                closest = root.val;  
            }  
              
            if(target < root.val) {  
                root = root.left;  
            } else {  
                root = root.right;  
            } 
        }  
          
        return closest;  
    }  
}  