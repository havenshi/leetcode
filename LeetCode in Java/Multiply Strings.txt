//Time:O(m+n)
//Space:O(m+n)
class Solution {
    public String multiply(String num1, String num2) {
        int m = num1.length(), n = num2.length();  
        int[] pos = new int[m + n];  
        
        for(int i = m-1; i >= 0; i--) {  //注意！如果不倒序仄从每个数的最高位开始，如果两个数长度不一样最高位的位置都默认为0，会导致位置偏差
            for(int j = n-1; j >= 0; j--) {  
                int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0');   
                pos[(m-1-i)+(n-1-j)] += mul;  //这个系数很重要，说明把原本为末尾的个位数的位置转化为0
            }  
        }    

        int carry = 0;
        for(int i = 0; i < pos.length; i++) { 
            int tmp = pos[i]+carry;
            pos[i] = tmp % 10;
            carry = tmp / 10;
        }

        StringBuilder sb = new StringBuilder();          
        for(int i = pos.length-1; i >= 0; i--) {
            if(!(sb.length() == 0 && pos[i] == 0)) { //去掉所有开头的0
                sb.append(pos[i]);  
            }
        }
        return sb.length() == 0 ? "0" : sb.toString();  
    }
}