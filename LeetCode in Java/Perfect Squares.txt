//Time:O(n)
//Time:O(n)
//好慢。。要改改
class Solution {
    public int numSquares(int n) {
        int sqr = (int)Math.sqrt(n)+1;
        int[] dp = new int[n+1];
        for (int i=0; i<=n; i++){
            dp[i] = i;
        }
        
        for (int i=1; i<=n; i++){ // i和j交换里外都可以
            for (int j=1; j<=(int)Math.sqrt(i); j++){
                dp[i] = Math.min(dp[i], 1+dp[i-(int)Math.pow(j, 2)]);
            }
        }
        return dp[n];
    }
}








//Time:O(n)
//Time:O(n)
//快！
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        
        for(int i = 1; i * i <= n; i++)
            dp[i * i] = 1;
        
        for(int i = 1; i <= n; i++)
            for(int j = 1; i + j * j <= n; j++)
                dp[i + j * j] = Math.min(dp[i + j * j], dp[i] + 1);
        return dp[n];
    }
}






//也很快！
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        for(int i=1; i<=n; i++){
            int j=1;
            int min = Integer.MAX_VALUE;
            while(i-j*j>=0){
                min = Math.min(min, dp[i-j*j]+1);
                j++;
            }
            dp[i] = min;
        }
        return dp[n];
    }
}