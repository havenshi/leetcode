# Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.
#
# For example:
#
# Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.
#
# Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.
#
# Hint:
#
#   Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree?
#   According to the definition of tree on Wiki: 'a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.'
# Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

//（1）是一个全连通图（所有节点相通）
//（2）无回路
//其中（2）等价于：（3）图的边数=节点数-1



//Time:O(n)
//Space:O(n)
//BFS
public class Solution {  
    public boolean validTree(int n, int[][] edges) {  
        Map<Integer, Set<Integer>> graph = new HashMap<>();  //hashmap里为v:(v,other v)
        for(int i=0; i<edges.length; i++) {  
            for(int j=0; j<2; j++) { //j=0 or 1，表示把自己和自己的连通也加进set里  
                Set<Integer> pairs = graph.get(edges[i][j]);  
                if (pairs == null) {  
                    pairs = new HashSet<>();  
                    graph.put(edges[i][j], pairs);  
                }  
                pairs.add(edges[i][1-j]);  
            }  
        }  
        Set<Integer> visited = new HashSet<>();  //Set - HashSet
        Set<Integer> current = new HashSet<>();  
        visited.add(0);  
        current.add(0);  
        while (!current.isEmpty()) {  
            Set<Integer> next = new HashSet<>();  //记录目前栈里面所有节点的子节点
            for(Integer node: current) {  
                Set<Integer> pairs = graph.get(node);  
                if (pairs == null) continue;  
                for(Integer pair: pairs) {  
                    if (visited.contains(pair)) return false; //如果visited，说明形成环路
                    next.add(pair);  
                    visited.add(pair);  //记录最终是否所有节点都访问过
                    graph.get(pair).remove(node);  //node-pair，访问过以后要把对应的pair-node也删除
                }  
            }  
            current = next;  
        }  
        return visited.size() == n;  
    }  
}  




//Time:O(n)
//Space:O(n)
//DFS
public class Solution {  
    private boolean[] visited;  //可以用array也可以像上面的解法用hashset
    private int visits = 0;  
    private boolean isTree = true;  

    public boolean validTree(int n, int[][] edges) {  
        visited = new boolean[n];  
        List<Integer>[] graph = new List[n];  
        for(int i=0; i<n; i++) graph[i] = new ArrayList<>();  
        for(int[] edge: edges) {  //node-edge和edge-node都要加进graph里
            graph[edge[0]].add(edge[1]);  
            graph[edge[1]].add(edge[0]);  
        }  
        check(-1, 0, graph);  
        return isTree && visits == n;  
    }  

    private void check(int prev, int curr, List<Integer>[] graph) {  
        if (!isTree) return;  
        if (visited[curr]) {  //已visited则形成环路，直接终止程序
            isTree = false;  
            return;  
        }  
        visited[curr] = true;  
        visits ++;  
        for(int next: graph[curr]) {  
            if (next == prev) continue; //啥。。感觉可以用上面解法中的删除对应edge-node
            check(curr, next, graph);  
            if (!isTree) return;  
        }  
          
    }  
}  




//Union-Find
public class Solution {  
    public boolean validTree(int n, int[][] edges) {  
        if (edges.length != n-1) return false;  
        int[] roots = new int[n];  
        for(int i=0; i<n; i++) roots[i] = i;  
        for(int i=0; i<edges.length; i++) {  
            int root1 = root(roots, edges[i][0]);  
            int root2 = root(roots, edges[i][1]);  
            if (root1 == root2) return false;  //如果共有一个root说明形成环路
            roots[root2] = root1;  //实时更新roots数组。注意是先找两个root的最上层根，然后再更新root2的根为root1
        }  
        return true;  
    }  
    private int root(int[] roots, int id) {  //辅助函数返回node的最上层root
        if (id == roots[id]) return id;  
        return root(roots, roots[id]);  
    }  
}  