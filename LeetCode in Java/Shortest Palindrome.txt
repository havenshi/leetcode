//求拼接之后的{s}#{s_rev}的公共前缀后缀，KMP算法。
public class Solution {
    public String shortestPalindrome(String s) {
        StringBuilder builder = new StringBuilder(s);
        return builder.reverse().substring(0, s.length() - getCommonLength(s)) + s;
    }

    private int getCommonLength(String str) {
        StringBuilder builder = new StringBuilder(str);
        String rev = new StringBuilder(str).reverse().toString();
        builder.append("#").append(rev); //builder={s}#{s_rev}
        int[] p = new int[builder.length()];
        for (int i = 1; i < p.length; i++) {
            int j = p[i - 1];
            while (j > 0 && builder.charAt(i) != builder.charAt(j)) j = p[j - 1]; //若s[i]!=s[j]，即s.substring(0,j)和s.substring(i-j+1,i+1)是不匹配的，但是仍然可能存在s.substring(0,x)和s.substring(i-x+1,i+1)
            p[i] = j == 0 ? (builder.charAt(i) == builder.charAt(0) ? 1 : 0) : j + 1; //若s[i]=s[j]，也就是当前字符延续了之前的公共前缀后缀，那么p[i]=p[i-1]+1即可
        }
        return p[p.length - 1];
    }
}







int KmpSearch(char* s, char* p)  
{  
    int i = 0;  
    int j = 0;  
    int sLen = strlen(s);  
    int pLen = strlen(p);  
    while (i < sLen && j < pLen)  
    {  
        //①如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++      
        if (j == -1 || s[i] == p[j])  
        {  
            i++;  
            j++;  
        }  
        else  
        {  
            //②如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]      
            //next[j]即为j所对应的next值        
            j = next[j];  
        }  
    }  
    if (j == pLen)  
        return i - j;  
    else  
        return -1;  
}  


//优化过后的next数组求法  
void GetNextval(char* p, int next[])  
{  
    int pLen = strlen(p);  
    next[0] = -1; //next为该位置之前的最长相同前后缀长度，即k-1并且将首位初始化为-1
    int k = -1;  //k为包含该位置的最长相同前后缀长度
    int j = 0;  //j为0~len-1所有位置
    while (j < pLen - 1)  
    {  
        //p[k]表示前缀，p[j]表示后缀    
        if (k == -1 || p[j] == p[k])  
        {  
            ++j;  
            ++k;  
            //较之前next数组求法，改动在下面4行  
            if (p[j] != p[k])  
                next[j] = k;   //之前只有这一行，即前一位置的k值  
            else  
                //因为不能出现p[j] = p[ next[j ]]（否则在今后的判断中，如果该位置与s[i]不匹配，那么不管移动几轮next，新位置永远都与s[i]不匹配），所以当出现时需要继续递归，k = next[k] = next[next[k]]  
                next[j] = next[k];  
        }  
        else  
        {  
            k = next[k];  //如果s[i]!=p[j]，则需要往前找了
        }  
    }
}  

