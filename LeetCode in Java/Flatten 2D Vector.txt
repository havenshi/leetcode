//Implement an iterator to flatten a 2d vector.
//For example,
//Given 2d vector =
//[
//  [1,2],
//  [3],
//  [4,5,6]
//]
//By calling next repeatedly until hasNext returns false, the //order of elements
//returned by next should be: [1,2,3,4,5,6].

# Time:  O(n)
# Space: O(1)

public class Vector2D implements Iterator<Integer> {  
    private int row , col;  
    private List<List<Integer>> vec2d;  
    public Vector2D(List<List<Integer>> vec2d) {  
        this.vec2d = vec2d;  
        while (row <vec2d.size() && col >= vec2d.get(row).size()) {  
            col = 0;  
            row ++;  
        }  
    }  
  
    @Override  
    public Integer next() {  
        Integer value = vec2d.get(row).get(col);  
        col ++;  
        while (row <vec2d.size() && col >= vec2d.get(row).size()) {  
            col = 0;  
            row ++;  
        }  
        return value;  
    }  
  
    @Override  
    public boolean hasNext() {  
        return row < vec2d.size() && col < vec2d.get(row).size();  
    }  
}  
  
/** 
 * Your Vector2D object will be instantiated and called as such: 
 * Vector2D i = new Vector2D(vec2d); 
 * while (i.hasNext()) v[f()] = i.next(); 
 */  