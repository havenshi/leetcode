//Time:O(nlog(n))
//Space:O(n)

class MedianFinder {
    PriorityQueue<Integer> minHeap;
    PriorityQueue<Integer> maxHeap;
    
    /** initialize your data structure here. */
    public MedianFinder() {
        minHeap = new PriorityQueue<Integer>();
        maxHeap = new PriorityQueue<Integer>();
    }
    
    public void addNum(int num) { //num和minHeap、maxHeap比较大小，如果最小或居中就把num放在minHeap里，否则放在maxHeap里。最后再调整两个heap的size，允许minHeap比maxHeap多出一个
        if (minHeap.size() == 0 || num <= (-minHeap.peek()) || (maxHeap.size() != 0 && num < maxHeap.peek())) minHeap.offer(-num);
        else maxHeap.offer(num);
        
        if (minHeap.size()-maxHeap.size()==2) maxHeap.offer(-minHeap.poll());
        else if (maxHeap.size()-minHeap.size()==1) minHeap.offer(-maxHeap.poll());
    }
    
    public double findMedian() {
        if (minHeap.size()-maxHeap.size()==1) return -minHeap.peek();
        else return (-minHeap.peek()+maxHeap.peek())/2.0;
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */