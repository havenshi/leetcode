# There are a row of n houses, each house can be painted with one of the k colors.
# The cost of painting each house with a certain color is different. You have to paint
# all the houses such that no two adjacent houses have the same color.
#
# The cost of painting each house with a certain color is represented by a n x k cost matrix.
# For example, costs0 is the cost of painting house 0 with color 0; costs1 is the cost of
# painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.
#
# Note:
# All costs are positive integers.
#
# Follow up:
# Could you solve it in O(nk) runtime?


//Time:(n*k)
//Space:(n)

public class PaintHouseTwo {
    public int minCostII(int[][] costs) {
        if (costs != null && costs.length == 0) return 0;
 
        int preMin = 0, preSecndMin = 0, preColor = -1; //注意这里把上一个房子的颜色也存下来
 
        for (int i = 0; i < costs.length; i++) {
            int curMin = Integer.MAX_VALUE;
            int curSecndMin = Integer.MAX_VALUE;
            int curColor = -1;
            for (int j = 0; j < costs[0].length; j++) {
                costs[i][j] = costs[i][j] + (preColor == j ? preSecndMin : preMin); //存上一个房子的最小cost的两种颜色
 
                if (costs[i][j] < curMin) {
                    curSecndMin = curMin;
                    curMin = costs[i][j];
                    curColor = j; //如果current cost比第一小的还小，整个preocolor及两个premin全都要更新
                } else if (costs[i][j] < curSecndMin) {
                    curSecndMin = costs[i][j]; //如果current cost比第二小的小，preocolor不用更改，且只用更改presecondmin
                }
            }
            preMin = curMin;
            preSecndMin = curSecndMin;
            preColor = curColor;
        }
        return preMin;
    }
}