//Time: O(n^2)
//Space: O(n)

//Java get duplication...why???
class Solution {
    //1. 先删右括号确保prefix合法，再删左括号
    //2. 删除括号的时候连续左括号或右括号，只要删除第一个即可
    //3. 记最后删除的位置，下次recursion的时候从该位置后面删
    public List<String> removeInvalidParentheses(String s) {
        int l = 0;
        int r = 0;
        
        for (char ch : s.toCharArray()) {
            l += (ch == '('? 1:0);
            if (l == 0)
                r += (ch == ')'? 1:0);
            else
                l -= (ch == ')'? 1:0);
        }
        
        List<String> ans = new ArrayList<>();
        dfs(s, 0, l, r, ans);
        return ans;
    }
    
    public void dfs(String s, int start, int l, int r, List<String> ans) {
        // Jump condition
        if (l == 0 && r == 0) {
            if (isValid(s)) ans.add(s);
            return;
        }
        
        for (int i = start; i < s.length(); i++) {
            if (i != start && s.substring(i) == s.substring(i-1)) continue; // neglect duplication
            
            if (s.charAt(i) == '(' || s.charAt(i) == ')') {
                String curr = s.substring(0, i) + s.substring(i + 1);
                if (r > 0 && s.charAt(i) == ')') 
                    dfs(curr, i, l, r - 1, ans);
                else if (l > 0 && s.charAt(i) == '(')
                    dfs(curr, i, l - 1, r, ans);
            }
        }
    }
    
    public boolean isValid(String s) {
        int count = 0;
        for (char ch : s.toCharArray()) {
            if (ch == '(') count++;
            if (ch == ')') count--;
            if (count < 0) return false;
        }
        return count == 0;
    }
}




//C++ is good
class Solution {
public:
    vector<string> removeInvalidParentheses(const string& s) {        
        int l = 0;
        int r = 0;
        
        for (const char ch : s) {
            l += (ch == '(');
            if (l == 0)
                r += (ch == ')');
            else
                l -= (ch == ')');
        }
        
        vector<string> ans;
        dfs(s, 0, l, r, ans);
        return ans;
    }
private:
    bool isValid(const string& s) {
        int count = 0;
        for (const char ch : s) {
            if (ch == '(') ++count;
            if (ch == ')') --count;
            if (count < 0) return false;
        }
        return count == 0;
    }
    
    // l/r: number of left/right parentheses to remove.
    void dfs(const string& s, int start, int l, int r, vector<string>& ans) {
        // Nothing to remove.
        if (l == 0 && r == 0) {
            if (isValid(s)) ans.push_back(s);
            return;
        }
        
        for (int i = start; i < s.length(); ++i) {
            // We only remove the first parenthes if there are consecutive ones to avoid duplications.
            if (i != start && s[i] == s[i - 1]) continue;
            
            if (s[i] == '(' || s[i] == ')') {
                string curr = s;
                curr.erase(i, 1);
                if (r > 0 && s[i] == ')') 
                    dfs(curr, i, l, r - 1, ans);
                else if (l > 0 && s[i] == '(')
                    dfs(curr, i, l - 1, r, ans);
            }
        }
    }
};