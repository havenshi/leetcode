# Time:  O(n)
# Space: O(1)

class Solution {
    public int trap(int[] height) {
        if (height == null || height.length == 0) {
            return 0;
        }
        int length = height.length;

        int[] left = new int[length];
        int[] right = new int[length];

        int res = 0;

        for (int i = 1; i < length; i++) {
            left[i] = Math.max(left[i - 1], height[i - 1]);
        }

        for (int j = length - 2; j >= 0; j--) {
            right[j] = Math.max(right[j + 1], height[j + 1]);
        }

        for (int k = 0; k < length; k++) {
            if (Math.min(left[k], right[k]) - height[k] > 0) {
                res +=  Math.min(left[k], right[k]) - height[k];
            }
        }

        return res;

    }
}