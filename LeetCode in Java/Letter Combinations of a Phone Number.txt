// Time:  O(n * 4^n)
// Space: O(n)

class Solution {
    public static ArrayList<String> result;
    Map<Character, char[]> map;
    
    public List<String> letterCombinations(String digits) {
        
        result = new ArrayList<String>();
        if (digits.length()==0) return result;

        map = new HashMap<Character, char[]>();
        map.put('2', new char[] { 'a', 'b', 'c' });
        map.put('3', new char[] { 'd', 'e', 'f' });
        map.put('4', new char[] { 'g', 'h', 'i' });
        map.put('5', new char[] { 'j', 'k', 'l' });
        map.put('6', new char[] { 'm', 'n', 'o' });
        map.put('7', new char[] { 'p', 'q', 'r', 's' });
        map.put('8', new char[] { 't', 'u', 'v'});
        map.put('9', new char[] { 'w', 'x', 'y', 'z' });

        StringBuilder sb = new StringBuilder();
        helper(digits, sb);

        return result;
    }

    public void helper(String digits, StringBuilder sb) {
        if (sb.length() == digits.length()) {
            result.add(sb.toString());
            return;
        }

        for (char c : map.get(digits.charAt(sb.length()))) {
            sb.append(c);
            helper(digits, sb);
            sb.deleteCharAt(sb.length()-1);
        }
    
    }
}