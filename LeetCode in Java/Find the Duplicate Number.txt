//Time:O(nlogn)
//Space:O(1)
//二分法1
import java.util.*;
class Solution {
    public int findDuplicate(int[] nums) {
        int l = 0;
        int r = nums.length-1;
        while (l<=r){
            int mid = l+(r-l)/2;
            int cnt = 0;
            for(int i = 0; i < nums.length; i++){
                if(nums[i] <= mid) cnt++;
            }
            if (cnt>mid){ //比1~n中某一个值小的数的个数
                r = mid-1;
            }
            else l = mid+1;
        }
        return l;
    }
}


//二分法2
import java.util.*;
class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        int l = 0;
        int r = nums.length-1;
        while (l<=r){
            int mid = l+(r-l)/2;
            int cnt = 0;
            if (mid+1>nums[mid]){ //排序后比较位置mid即所表示的值nums[mid]
                r = mid-1;
            }
            else l = mid+1;
        }
        return nums[l];
    }
}





//Time:O(n)
//Space:O(n)
//如果有重复的话，即没有n+1这个值，因此就跳不出这个数列。
//如果有重复的话，这中间就会产生多对一的映射，比如数组1231,则映射关系为{0，3}->1, 1->2, 2->3。这样从0到1，1之后还有一条路也可以回到1，所以有环路。

class Solution {
    public int findDuplicate(int[] nums) {
        int slow = 0;
        int fast = 0;
        slow = nums[slow];
        fast = nums[nums[fast]];
        while (slow != fast){
            slow = nums[slow];
            fast = nums[nums[fast]];
        } 
        slow = 0;
        while (slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
}